[{"/Users/koko/Documents/foodie/foodie_front/src/index.js":"1","/Users/koko/Documents/foodie/foodie_front/src/App.js":"2","/Users/koko/Documents/foodie/foodie_front/src/reportWebVitals.js":"3","/Users/koko/Documents/foodie/foodie_front/src/components/header.jsx":"4","/Users/koko/Documents/foodie/foodie_front/src/components/login_user.jsx":"5","/Users/koko/Documents/foodie/foodie_front/src/components/login_email.jsx":"6","/Users/koko/Documents/foodie/foodie_front/src/components/register.jsx":"7"},{"size":500,"mtime":1612242829946,"results":"8","hashOfConfig":"9"},{"size":730,"mtime":1612908030691,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611946530961,"results":"11","hashOfConfig":"9"},{"size":247,"mtime":1612383711060,"results":"12","hashOfConfig":"9"},{"size":3362,"mtime":1612898733714,"results":"13","hashOfConfig":"9"},{"size":3515,"mtime":1612907285748,"results":"14","hashOfConfig":"9"},{"size":10471,"mtime":1613587066351,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"jfoc2g",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/koko/Documents/foodie/foodie_front/src/index.js",[],["34","35"],"/Users/koko/Documents/foodie/foodie_front/src/App.js",[],"/Users/koko/Documents/foodie/foodie_front/src/reportWebVitals.js",[],"/Users/koko/Documents/foodie/foodie_front/src/components/header.jsx",[],"/Users/koko/Documents/foodie/foodie_front/src/components/login_user.jsx",["36","37","38"],"import React, { Component } from \"react\";\n// import Logo from './login.jsx';\n\nimport LogoImage from \"../assets/image/logo.png\";\nimport \"antd/dist/antd.css\";\nimport \"../assets/css/all.css\";\n\nimport { Form, Input, Button, Row, Col, Avatar,Checkbox } from \"antd\";\n\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\n\nclass LoginUser extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Row>\n          <Col\n            xs={{ span: 1 }}\n            sm={{ span: 3 }}\n            md={{ span: 6 }}\n            lg={{ span: 8 }}\n          >\n            1 col-order-responsive\n          </Col>\n          <Col\n            xs={{ span: 22 }}\n            sm={{ span: 18 }}\n            md={{ span: 12 }}\n            lg={{ span: 8 }}\n          >\n            <div className=\"form_div\">\n              <div className=\"inner_center\">\n                <Avatar\n                  size={{\n                    xs: 60,\n                    sm: 70,\n                    md: 80,\n                    lg: 90,\n                    xl: 100,\n                    xxl: 110,\n                  }}\n                  src={LogoImage}\n                />\n                <h2>Login with username </h2>\n              </div>\n              <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                initialValues={{\n                  remember: true,\n                }}\n            \n              >\n                <Form.Item\n                  name=\"username\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your Username!\",\n                    },\n                  ]}\n                >\n                  <Input\n                    prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                    placeholder=\"Username\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  name=\"password\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your Password!\",\n                    },\n                  ]}\n                >\n                  <Input\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />\n                </Form.Item>\n                <Form.Item>\n                  \n                  <a  href='../loginemail'>\n                    login with email\n                  </a>\n                  <a className=\"right_float\" href=\"\">\n                    Forgot password\n                  </a>\n                </Form.Item>\n\n                <Form.Item>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    className=\"login-form-button\"\n                  >\n                    Log in\n                  </Button>\n                  Or <a href=\"\">register now!</a>\n                </Form.Item>\n              </Form>\n            </div>\n          </Col>\n\n          <Col\n            xs={{ span: 1 }}\n            sm={{ span: 3 }}\n            md={{ span: 6 }}\n            lg={{ span: 8 }}\n          >\n            1 col-order-responsive\n          </Col>\n        </Row>\n\n       \n      </div>\n    );\n  }\n}\n\nexport default LoginUser;\n","/Users/koko/Documents/foodie/foodie_front/src/components/login_email.jsx",["39","40","41"],"import React, { Component } from \"react\";\n// import Logo from './login.jsx';\n\nimport LogoImage from \"../assets/image/logo.png\";\nimport \"antd/dist/antd.css\";\nimport \"../assets/css/all.css\";\n\nimport { Form, Input, Button, Row, Col, Avatar,Checkbox } from \"antd\";\n\nimport {  LockOutlined,MailFilled } from '@ant-design/icons';\n\nclass LoginEmail extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Row>\n          <Col\n            xs={{ span: 1 }}\n            sm={{ span: 3 }}\n            md={{ span: 6 }}\n            lg={{ span: 8 }}\n          >\n            1 col-order-responsive\n          </Col>\n          <Col\n            xs={{ span: 22 }}\n            sm={{ span: 18 }}\n            md={{ span: 12 }}\n            lg={{ span: 8 }}\n          >\n            <div className=\"form_div\">\n              <div className=\"inner_center\">\n                <Avatar\n                  size={{\n                    xs: 60,\n                    sm: 70,\n                    md: 80,\n                    lg: 90,\n                    xl: 100,\n                    xxl: 110,\n                  }}\n                  src={LogoImage}\n                />\n                <h2>Login with email </h2>\n              </div>\n              <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                initialValues={{\n                  remember: true,\n                }}\n            \n              >\n                <Form.Item\n                  name=\"email\"\n                  rules={[\n                    {\n                      type: 'email',\n                      message: 'The input is not valid E-mail!',\n                    },\n                    {\n                      required: true,\n                      message: 'Please input your E-mail!',\n                    },\n                  ]}\n                >\n                  <Input\n                    prefix={<MailFilled className=\"site-form-item-icon\" />}\n                    placeholder=\"Email\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  name=\"password\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your Password!\",\n                    },\n                  ]}\n                >\n                  <Input\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />\n                </Form.Item>\n                \n                <Form.Item>\n                  \n                  <a  href='../loginusername'>\n                    login with user\n                  </a>\n                  <a className=\"right_float\" href=\"\">\n                    Forgot password\n                  </a>\n                </Form.Item>\n\n                <Form.Item>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    className=\"login-form-button\"\n                  >\n                    Log in\n                  </Button>\n                  Or <a href=\"\">register now!</a>\n                </Form.Item>\n              </Form>\n            </div>\n          </Col>\n\n          <Col\n            xs={{ span: 1 }}\n            sm={{ span: 3 }}\n            md={{ span: 6 }}\n            lg={{ span: 8 }}\n          >\n            1 col-order-responsive\n          </Col>\n        </Row>\n\n       \n      </div>\n    );\n  }\n}\n\nexport default LoginEmail;\n","/Users/koko/Documents/foodie/foodie_front/src/components/register.jsx",["42","43","44","45","46","47","48"],"import React, { Component } from \"react\";\n// import Logo from './login.jsx';\n\nimport LogoImage from \"../assets/image/logo.png\";\nimport \"antd/dist/antd.css\";\nimport \"../assets/css/all.css\";\n\nimport { Form, Input, Button, Row, Col, Avatar } from \"antd\";\n\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailFilled,\n  ReloadOutlined,\n} from \"@ant-design/icons\";\nimport axios from \"axios\";\nimport qs from \"qs\";\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      captcha: \"\",\n    };\n  }\n\n  componentWillMount() {\n    this.getCaptha();\n  }\n\n  getCaptha = () => {\n    axios.get(\"/v1/users/getcaptcha\").then((response) => {\n      if (response.data.result == 200) {\n        let img_base64 = \"data:image/png;base64,\" + response.data.captcha;\n        this.setState({ captcha: img_base64 });\n      }\n    });\n  };\n  // verifyCaptha = (code) => {\n  //   axios.get(\"/v1/users/verifyCaptcha\").then((response) => {\n\n  //     if (response.data.result == 200) {\n  //       let img_base64 = \"data:image/png;base64,\" + response.data.captcha;\n  //       this.setState({ captcha: img_base64 });\n  //     }\n  //   });\n\n  // };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Row>\n          <Col\n            xs={{ span: 1 }}\n            sm={{ span: 3 }}\n            md={{ span: 6 }}\n            lg={{ span: 8 }}\n          >\n            1 col-order-responsive\n          </Col>\n          <Col\n            xs={{ span: 22 }}\n            sm={{ span: 18 }}\n            md={{ span: 12 }}\n            lg={{ span: 8 }}\n          >\n            <div className=\"form_div\">\n              <div className=\"inner_center\">\n                <Avatar\n                  size={{\n                    xs: 60,\n                    sm: 70,\n                    md: 80,\n                    lg: 90,\n                    xl: 100,\n                    xxl: 110,\n                  }}\n                  src={LogoImage}\n                />\n                <h2>Register </h2>\n              </div>\n              <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                initialValues={{\n                  remember: true,\n                }}\n              >\n                <Form.Item\n                  validateTrigger={[\"onChange\", \"onBlur\"]}\n                  name=\"username\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your Username! \",\n                    },\n                    {\n                      validator: (_, value) => {\n                        return new Promise((resolve, reject) => {\n                          if (value) {\n                            axios\n                              .post(\n                                \"v1/users/checkusername\",\n                                qs.stringify({ username: value }),\n                                {\n                                  headers: {\n                                    \"Content-Type\":\n                                      \"application/x-www-form-urlencoded;charset=utf-8\",\n                                  },\n                                }\n                              )\n                              .then((response) => {\n                                if (response.data.result == 200) {\n                                  resolve();\n                                } else {\n                                  reject(response.data.msg);\n                                }\n                              });\n                          }\n                          else{\n                            reject()\n                          }\n                        });\n                      },\n                      validateTrigger: \"onBlur\"\n                    },\n                  ]}\n                >\n                  <Input\n                    prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                    placeholder=\"Username\"\n                  />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"email\"\n                  validateTrigger={[\"onChange\", \"onBlur\"]}\n                  rules={[\n                    {\n                      type: \"email\",\n                      message: \"The input is not valid E-mail!\",\n                    },\n                    {\n                      required: true,\n                      message: \"Please input your E-mail!\",\n                    },\n                    {\n                      validator: (_, value) => {\n                        return new Promise((resolve, reject) => {\n                          if (value) {\n                            axios\n                              .post(\n                                \"v1/users/checkemail\",\n                                qs.stringify({ email: value }),\n                                {\n                                  headers: {\n                                    \"Content-Type\":\n                                      \"application/x-www-form-urlencoded;charset=utf-8\",\n                                  },\n                                }\n                              )\n                              .then((response) => {\n                                if (response.data.result == 200) {\n                                  resolve();\n                                } else {\n                                  reject(response.data.msg);\n                                }\n                              });\n                          }\n                          else{\n                            reject()\n                          }\n                        });\n                      },\n                      validateTrigger: \"onBlur\"\n                    },\n                  ]}\n                >\n                  <Input\n                    prefix={<MailFilled className=\"site-form-item-icon\" />}\n                    placeholder=\"Email\"\n                  />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"password\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your Password!\",\n                    },\n                    \n                  ]}\n                >\n                  <Input\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  name=\"confirm\"\n                  dependencies={[\"password\"]}\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your Password!\",\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(_, value) {\n                        if (!value || getFieldValue(\"password\") === value) {\n                          return Promise.resolve();\n                        }\n\n                        return Promise.reject(\n                          \"The two passwords that you entered do not match!\"\n                        );\n                      },\n                    }),\n                  ]}\n                >\n                  <Input\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                    type=\"password\"\n                    placeholder=\"comfirm password\"\n                  />\n                </Form.Item>\n                <Form.Item extra=\"We must make sure that your are a human.\">\n                  <Row>\n                    <Col span={12}>\n                      <Form.Item\n                        name=\"captcha\"\n                        validateTrigger={[\"onChange\", \"onBlur\"]}\n                        noStyle\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Please input the captcha you got!\",\n                          },\n                          {\n                            validateTrigger: \"onBlur\",\n                            validator: (_, value) => {\n                              return new Promise((resolve, reject) => {\n                                if (value) {\n                                  axios\n                                    .post(\n                                      \"/v1/users/verifycaptcha\",\n                                      qs.stringify({ code: value }),\n                                      {\n                                        headers: {\n                                          \"Content-Type\":\n                                            \"application/x-www-form-urlencoded;charset=utf-8\",\n                                        },\n                                      }\n                                    )\n                                    .then((response) => {\n                                      if (response.data.result == 200) {\n                                        resolve();\n                                      } else {\n                                        reject(\"your captcha is wrong\");\n                                      }\n                                    });\n                                } else {\n                                  reject();\n                                }\n                              });\n                            },\n                          },\n                        ]}\n                      >\n                        <Input />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <img src={this.state.captcha} />\n                      <a onClick={this.getCaptha}>change the captcha</a>\n                    </Col>\n                  </Row>\n                </Form.Item>\n\n                <Form.Item>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    className=\"login-form-button\"\n                  >\n                    Register\n                  </Button>\n                  Or <a href=\"../loginemail\">login in</a>\n                </Form.Item>\n              </Form>\n            </div>\n          </Col>\n\n          <Col\n            xs={{ span: 1 }}\n            sm={{ span: 3 }}\n            md={{ span: 6 }}\n            lg={{ span: 8 }}\n          >\n            1 col-order-responsive\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":8,"column":48,"nodeType":"55","messageId":"56","endLine":8,"endColumn":56},{"ruleId":"57","severity":1,"message":"58","line":88,"column":19,"nodeType":"59","endLine":88,"endColumn":54},{"ruleId":"57","severity":1,"message":"58","line":101,"column":22,"nodeType":"59","endLine":101,"endColumn":33},{"ruleId":"53","severity":1,"message":"54","line":8,"column":48,"nodeType":"55","messageId":"56","endLine":8,"endColumn":56},{"ruleId":"57","severity":1,"message":"58","line":93,"column":19,"nodeType":"59","endLine":93,"endColumn":54},{"ruleId":"57","severity":1,"message":"58","line":106,"column":22,"nodeType":"59","endLine":106,"endColumn":33},{"ruleId":"53","severity":1,"message":"60","line":14,"column":3,"nodeType":"55","messageId":"56","endLine":14,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":34,"column":32,"nodeType":"63","messageId":"64","endLine":34,"endColumn":34},{"ruleId":"61","severity":1,"message":"62","line":115,"column":58,"nodeType":"63","messageId":"64","endLine":115,"endColumn":60},{"ruleId":"61","severity":1,"message":"62","line":165,"column":58,"nodeType":"63","messageId":"64","endLine":165,"endColumn":60},{"ruleId":"61","severity":1,"message":"62","line":259,"column":64,"nodeType":"63","messageId":"64","endLine":259,"endColumn":66},{"ruleId":"65","severity":1,"message":"66","line":277,"column":23,"nodeType":"59","endLine":277,"endColumn":55},{"ruleId":"57","severity":1,"message":"67","line":278,"column":23,"nodeType":"59","endLine":278,"endColumn":51},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ReloadOutlined' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]